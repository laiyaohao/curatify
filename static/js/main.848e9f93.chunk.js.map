{"version":3,"sources":["components/SearchBar/SearchBar.js","components/Track/Track.js","components/TrackList/TrackList.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","util/Spotify.js","util/secret.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","onAdd","track","onRemove","isRemoval","name","artist","album","renderAction","TrackList","console","log","tracks","length","map","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","playlistTracks","onSave","token","Spotify","getAccessToken","access","window","location","href","match","expires","expires_in","Number","setTimeout","history","pushState","url","TERM","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","catch","error","savePlaylist","trackUris","accessT","userID","method","body","JSON","stringify","playlistID","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","afterPlaylistTracks","filter","playlistTrack","tracksUri","a","searchResult","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.848e9f93.chunk.js","sourcesContent":["import React from 'react';\nimport './SearchBar.css'\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            term: \"\"\n        }\n        this.search = this.search.bind(this);\n        this.handleTermChange = this.handleTermChange.bind(this);\n    }\n    search() {\n        // console.log(this.state.term)\n        this.props.onSearch(this.state.term)\n    }\n    handleTermChange(event) {\n        this.setState({term: event.target.value})\n    }\n    render() {\n        return (\n            <div className=\"SearchBar\">\n                <input placeholder=\"Enter A Song, Album, or Artist\" \n                onChange = {this.handleTermChange}/>\n                <button className=\"SearchButton\"\n                onClick = {this.search}>SEARCH</button>\n            </div>\n        )\n    }\n}\nexport default SearchBar;","import React from 'react';\nimport './Track.css';\n\nclass Track extends React.Component {\n    constructor(props) {\n        super(props)\n        this.addTrack = this.addTrack.bind(this)\n        this.removeTrack = this.removeTrack.bind(this)\n    }\n    addTrack() {\n        this.props.onAdd(this.props.track)\n    }\n    removeTrack() {\n        this.props.onRemove(this.props.track)\n    }\n    renderAction() {\n        if (this.props.isRemoval === true) {\n            return (<button className = \"Track-action\"\n            onClick = {this.removeTrack}>-</button>)\n        }\n        else {\n            return (<button className = \"Track-action\" \n            onClick = {this.addTrack}>+</button>)\n        }\n    }\n    render() {\n        return (\n            <div className=\"Track\">\n                <div className=\"Track-information\">\n                    <h3>{this.props.track.name}</h3>\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\n                </div>\n                    {/* <button className=\"Track-action\"><!-- + or - will go here --></button> */}\n                    {this.renderAction()}\n            </div>\n        )\n    }\n}\nexport default Track;","import React from 'react';\nimport Track from '../Track/Track';\nimport './TrackList.css';\n\nclass TrackList extends React.Component {\n    \n    render() {\n        // while it is still a promise, do nothing\n        // if (this.props.tracks instanceof Promise) {\n        //     setTimeout(() => {\n                \n        //     }, 3000);\n        // }\n        // else {\n        //     console.log(\"not a promise\")\n        // }\n        console.log(this.props.tracks)\n        // now its not a promise, return the track\n        return (\n            <div className=\"TrackList\">\n                {this.props.tracks && this.props.tracks.length && this.props.tracks.map(\n                    track =>{\n                        return (\n                            <Track key = {track.id} \n                            track = {track}\n                            onAdd = {this.props.onAdd}\n                            onRemove = {this.props.onRemove}\n                            isRemoval = {this.props.isRemoval}/>\n                        )\n                    }\n                )\n                }\n                \n            </div>\n        )\n    }\n}\nexport default TrackList;","import React from 'react';\nimport TrackList from '../TrackList/TrackList';\nimport './SearchResults.css';\n\nclass SearchResults extends React.Component {\n    render() {\n        // console.log(this.props.searchResults)\n        return (\n            <div className=\"SearchResults\">\n                <h2>Results</h2>\n                <TrackList tracks = {this.props.searchResults}\n                isRemoval = {false}\n                onAdd = {this.props.onAdd}/>\n            </div>\n        )\n    }\n}\nexport default SearchResults;","import React from \"react\";\nimport TrackList from \"../TrackList/TrackList\";\nimport './Playlist.css';\n\nclass Playlist extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleNameChange = this.handleNameChange.bind(this)\n    }\n    handleNameChange(event) {\n        this.props.onNameChange(event.target.value);\n    }\n    render() {\n        // console.log(this.props.playlistTracks)\n        return (\n            <div className=\"Playlist\">\n                <input placeholder={\"New Playlist\"} onChange = {this.handleNameChange}/>\n                <TrackList tracks = {this.props.playlistTracks}\n                onRemove = {this.props.onRemove}\n                isRemoval = {true}/>\n                <button className=\"Playlist-save\"\n                onClick = {this.props.onSave}>SAVE TO SPOTIFY</button>\n            </div>\n        )\n    }\n}\nexport default Playlist;","import CLIENT_ID from './secret';\n\nlet token = '';\n\nlet REDIRECT_URI = 'http://localhost:3000/';\nconst Spotify = {\n    getAccessToken() {\n        if (token !== '') {\n            return\n        }\n        const access = window.location.href.match(/access_token=([^&]*)/)\n        const expires = window.location.href.match(/expires_in=([^&]*)/)\n        if (access && expires) {\n            token = access[1];\n            const expires_in = Number(expires[1]);\n            window.setTimeout(() => (token = ''),expires_in *1000)\n            window.history.pushState('Access Token',null,'/')\n            return token;\n        } else {\n            let url = `https://accounts.spotify.com/authorize?client_id=${CLIENT_ID}&response_type=token&scope=playlist-modify-public&redirect_uri=${REDIRECT_URI}`;\n            window.location = url;\n        }\n        console.log(token)\n    },\n    \n    search(TERM) {\n        let spotifyTracks = fetch(\n            `https://api.spotify.com/v1/search?type=track&q=${TERM}`,{\n                headers: {Authorization: `Bearer ${token}`},\n            }\n        )\n        // console.log(\"this is response: \", response)\n            // converting the response to json format\n        .then(response => response.json())\n        .then (\n            jsonResponse => {\n                // if jsonResponse is empty, return empty array\n                if (!jsonResponse) {\n                    return [{}]\n                }\n                // console.log(jsonResponse)\n                // else, get each item in jsonResponse and map their attributes to\n                // relevant keys\n                let tracks = jsonResponse.tracks.items.map(track => ({\n                    id: track.id,\n                    name: track.name,\n                    artist: track.artists[0].name,\n                    album: track.album.name,\n                    uri: track.uri\n                }))\n                // console.log(tracks)\n                return tracks;\n            }\n        ).catch(error => {\n            console.log(\"Spotify search error\")\n        })\n        // return the tracks array\n        return spotifyTracks;\n    },\n\n    async savePlaylist(name,trackUris) {\n        if (!(name&&trackUris)) {\n            return;\n        }\n        const accessT = token;\n        // const headers = ;\n        // getting the user id, converting the response to json\n        const userID = await fetch(\n            `https://api.spotify.com/v1/me`,\n            {headers: {\n                Authorization: `Bearer ${accessT}`\n            },})\n            .then (\n                response => {return response.json()}\n                // with the {} brackets, it is important to put return inside!\n                )\n            .then(\n                jsonResponse => jsonResponse.id\n            );\n            \n        const playlistID = await fetch(\n            `https://api.spotify.com/v1/users/${userID}/playlists/`,\n            {\n                method: \"POST\",\n                headers: {\n                    Authorization: `Bearer ${accessT}`,\n                    \"Content-Type\": \"application/json\"\n            },\n                body: JSON.stringify({\n                    name: name\n                }),\n                json:true\n            }\n        ).then(\n            response => response.json()\n        ).then(\n            jsonResponse=> jsonResponse.id\n        );\n        console.log(userID);\n        console.log(playlistID);\n        await fetch (\n            `https://api.spotify.com/v1/users/${userID}/playlists/${playlistID}/tracks/`,\n            {\n                method: \"POST\",\n                headers: {\n                    Authorization: `Bearer ${accessT}`,\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    uris: trackUris\n                }),\n                json:true\n            }\n        )\n    }\n};\nexport default Spotify;","const CLIENT_ID = '5708e506989041d7a93e095ed3c83c69';\nexport default CLIENT_ID;","//import logo from './logo.svg';\nimport React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from \"../../util/Spotify\";\n\nclass App extends React.Component {\n  \tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tsearchResults: [],\n\t\t\tplaylistName: \"\",\n\t\t\tplaylistTracks: []\n\t\t}\n\t\tthis.addTrack = this.addTrack.bind(this);\n\t\tthis.removeTrack = this.removeTrack.bind(this);\n\t\tthis.updatePlaylistName = this.updatePlaylistName.bind(this);\n\t\tthis.savePlaylist = this.savePlaylist.bind(this);\n\t\tthis.search = this.search.bind(this);\n\t}\n\taddTrack(track) {\n\t\tif (this.state.playlistTracks.find(savedTrack => (savedTrack.id === track.id ))) {\n\t\t\treturn;\n\t\t}\n\t\telse {\n\t\t\tthis.state.playlistTracks.push(track);\n\t\t\tthis.setState({playlistTracks: this.state.playlistTracks})\n\t\t}\n\t}\n\tremoveTrack(track) {\n\t\tlet afterPlaylistTracks = this.state.playlistTracks.filter(playlistTrack => (playlistTrack.id !== track.id))\n\t\tthis.setState({playlistTracks : afterPlaylistTracks})\n\t}\n\tupdatePlaylistName(name) {\n\t\tthis.setState({playlistName: name})\n\t}\n\tsavePlaylist(){\n\t\tlet tracksUri = this.state.playlistTracks.map(track => track.uri);\n\t\tconsole.log(tracksUri)\n\t\tSpotify.savePlaylist(this.state.playlistName,tracksUri)\n\t}\n\tasync search(term) {\n\t\t// console.log(\"haha\")\n\t\t\n\t\tif (term) {\n\t\t\tSpotify.getAccessToken();\n\t\t\tlet searchResult = await Spotify.search(term);\n\t\t// await is important, because without it, it will be a promise, which we will\n\t\t// run into errors when we try to use .map() on promise\n\t\t// to use await, the function needs to be converted to a async function, using the async keyword at\n\t\t// the start of the function\n\t\t\tthis.setState({searchResults: searchResult})\n\t\t// console.log(searchResult)\n\t\t}\n\t\t\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t<h1>Curatify</h1>\n\t\t\t<div className=\"App\">\n\t\t\t\t<SearchBar onSearch = {this.search}/>\n\t\t\t\t<div className=\"App-playlist\">\n\t\t\t\t\t<SearchResults searchResults = {this.state.searchResults}\n\t\t\t\t\tonAdd = {this.addTrack}/>\n\t\t\t\t\t<Playlist playlistName = {this.state.playlistName} \n\t\t\t\t\tplaylistTracks = {this.state.playlistTracks}\n\t\t\t\t\tonRemove = {this.removeTrack}\n\t\t\t\t\tonNameChange = {this.updatePlaylistName}\n\t\t\t\t\tonSave = {this.savePlaylist}/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n\t\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}